[{"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/index.js":"1","/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/App.js":"2","/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/reportWebVitals.js":"3","/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/InputForm.js":"4","/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/assets/crypto_data.js":"5","/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Screens/landing.js":"6","/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/Results.js":"7","/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/Report.js":"8"},{"size":544,"mtime":1619371441080,"results":"9","hashOfConfig":"10"},{"size":1607,"mtime":1619395816082,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1619371441080,"results":"12","hashOfConfig":"10"},{"size":2809,"mtime":1619405085013,"results":"13","hashOfConfig":"10"},{"size":26080,"mtime":1619371441079,"results":"14","hashOfConfig":"10"},{"size":2559,"mtime":1619405385207,"results":"15","hashOfConfig":"10"},{"size":1715,"mtime":1619401855777,"results":"16","hashOfConfig":"10"},{"size":10311,"mtime":1619405207815,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"11gntib",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/index.js",[],["37","38"],"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/App.js",["39"],"import './App.css';\nimport React, { useEffect, useState } from 'react'\nimport Box from '@material-ui/core/Box'\nimport logo from './assets/Trend Invest.svg'\nimport { makeStyles } from '@material-ui/core/styles'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { AnimateOnChange } from 'react-animation'\nimport Landing from './Screens/landing'\nimport Results from './Components/Results'\n\nconst useStyles = makeStyles((theme) => ({\n  logo: {\n    alignSelf: 'start'\n  },\n  body: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  card: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  title: {\n    color: 'white',\n    textAlign: 'center'\n  },\n  animateWrapper: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  }\n}))\n\n\nfunction App() {\n  useEffect(() => {\n    document.body.style.backgroundColor = '#1652F0'\n  }, [])\n\n  const [data, setData] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const classes = useStyles()\n\n  return (\n    <div className={classes.body}>\n      <img src={logo} width='200' height='200' className={classes.logo}/>\n      <AnimateOnChange>\n        {data != null ? \n          <Box className={classes.card}>\n            <Results onClear={setData} data={data} />\n          </Box> \n          : \n          <Landing setData={setData} isLoading={isLoading} setIsLoading={setIsLoading} />}\n      </AnimateOnChange>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/reportWebVitals.js",[],"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/InputForm.js",[],"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/assets/crypto_data.js",[],"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Screens/landing.js",[],"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/Results.js",[],"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/Report.js",["40","41"],"import React from 'react'\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport { LineChart, XAxis, CartesianGrid, Line, Tooltip, YAxis, Legend } from 'recharts'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme) => ({\n    body: {\n        display: 'flex',\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n    },\n    graph_section_title: {\n        paddingTop: 30\n    },\n    graph_row: {\n        display: 'flex',\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center', \n    },\n    graph: {\n        display: 'flex',\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column'\n    },\n    reddit_mentions_graph: {\n        paddingTop: 20\n    },\n    reddit_sentiment_graph: {\n        paddingTop: 50\n    }\n}))\n\nconst BootstrapButton = withStyles({\n    root: {\n      color: 'white',\n      boxShadow: 'none',\n      textTransform: 'none',\n      fontSize: 14,\n      padding: '6px 200px',\n      border: '1px solid',\n      lineHeight: 1.5,\n      backgroundColor: '#1652F0',\n      borderColor: '#0063cc',\n      fontFamily: 'Red Hat Display',\n      '&:hover': {\n        backgroundColor: '#0069d9',\n        borderColor: '#0062cc',\n        boxShadow: 'none',\n      },\n      '&:active': {\n        boxShadow: 'none',\n        backgroundColor: '#0062cc',\n        borderColor: '#005cbf',\n      },\n      '&:focus': {\n        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\n      },\n    },\n  })(Button);\n\nconst Report = ({data, onClear}) => {\n    const classes = useStyles()\n    console.log(data.misc.Reddit_mentions_last_week)\n    const reddit_mentions = [\n        { \n            \"name\": \"4\",\n            \"# of reddit mentions\": data.misc.Reddit_mentions_four_weeks_ago, \n        },\n        { \n            \"name\": \"3\",\n            \"# of reddit mentions\": data.misc.Reddit_mentions_three_weeks_ago, \n        },\n        { \n            \"name\": \"2\",\n            \"# of reddit mentions\": data.misc.Reddit_mentions_two_weeks_ago, \n        },\n        { \n            \"name\": \"1\",\n            \"# of reddit mentions\": data.misc.Reddit_mentions_last_week, \n        },\n        { \n            \"name\": \"0\",\n            \"# of reddit mentions\": data.misc.Reddit_mentions_this_week, \n        },\n    ]\n\n    const reddit_sentiment = [\n        { \n            \"name\": \"4\",\n            \"Average sentiment\": data.misc.Reddit_sentiment_four_weeks_ago, \n        },\n        { \n            \"name\": \"3\",\n            \"Average sentiment\": data.misc.Reddit_sentiment_three_weeks_ago, \n        },\n        { \n            \"name\": \"2\",\n            \"Average sentiment\": data.misc.Reddit_sentiment_two_weeks_ago, \n        },\n        { \n            \"name\": \"1\",\n            \"Average sentiment\": data.misc.Reddit_sentiment_last_week, \n        },\n        { \n            \"name\": \"0\",\n            \"Average sentiment\": data.misc.Reddit_sentiment_this_week, \n        },\n    ]\n\n    const twitter_mentions = [\n        { \n            \"name\": \"4\",\n            \"# of twitter mentions\": data.misc.Twitter_mentions_four_weeks_ago, \n        },\n        { \n            \"name\": \"3\",\n            \"# of twitter mentions\": data.misc.Twitter_mentions_three_weeks_ago, \n        },\n        { \n            \"name\": \"2\",\n            \"# of twitter mentions\": data.misc.Twitter_mentions_two_weeks_ago, \n        },\n        { \n            \"name\": \"1\",\n            \"# of twitter mentions\": data.misc.Twitter_mentions_last_week, \n        },\n        { \n            \"name\": \"0\",\n            \"# of twitter mentions\": data.misc.Twitter_mentions_this_week, \n        },\n    ]\n\n    const twitter_sentiment = [\n        { \n            \"name\": \"4\",\n            \"Average sentiment\": data.misc.Twitter_sentiment_four_weeks_ago, \n        },\n        { \n            \"name\": \"3\",\n            \"Average sentiment\": data.misc.Twitter_sentiment_three_weeks_ago, \n        },\n        { \n            \"name\": \"2\",\n            \"Average sentiment\": data.misc.Twitter_sentiment_two_weeks_ago, \n        },\n        { \n            \"name\": \"1\",\n            \"Average sentiment\": data.misc.Twitter_sentiment_last_week, \n        },\n        { \n            \"name\": \"0\",\n            \"Average sentiment\": data.misc.Twitter_sentiment_this_week, \n        },\n    ]\n\n    const price = [\n        { \n            \"name\": \"4\",\n            \"price\": data.misc.Price_four_weeks_ago, \n        },\n        { \n            \"name\": \"3\",\n            \"price\": data.misc.Price_three_weeks_ago, \n        },\n        { \n            \"name\": \"2\",\n            \"price\": data.misc.Price_two_weeks_ago, \n        },\n        { \n            \"name\": \"1\",\n            \"price\": data.misc.Price_last_week, \n        },\n        { \n            \"name\": \"0\",\n            \"price\": data.misc.Price_this_week, \n        },\n    ]\n    return (\n        <Box className={classes.body}>\n            <h2>{data.misc.name}</h2>\n            <caption>\n                <center>\n                    I've predicted that {data.misc.name} is\n                        <span \n                            style={{ color: data.prediction == 'Bearish' ? 'red' : 'green'}}>\n                                {' ' + data.prediction + ' '}\n                        </span> \n                    for the next week with a confidence level of \n                        <span \n                            style={{ color: data.confidence > .80 ? 'green' : data.confidence < .65 ? 'red' : 'orange'}}>\n                                    {' ' + (data.confidence*100).toFixed(2)}%\n                        </span>\n                </center>\n            </caption>\n            <h4 className={classes.graph_section_title}>Here's some of the data I used</h4>\n            <div className={classes.graph_row}>\n                <div className={classes.graph}>\n                    <h6 className={classes.reddit_mentions_graph}>Reddit Mentions (Weekly)</h6>\n                        <LineChart\n                         width={400}\n                         height={400}\n                         data={reddit_mentions}\n                         margin={{ top: 5, right: 20, left: 15, bottom: 5 }}\n                        >\n                            <XAxis dataKey=\"name\"/>\n                            <YAxis domain={['auto', 'auto']}/>\n                            <Tooltip />\n                            <CartesianGrid stroke=\"#f5f5f5\" />\n                            <Line type=\"monotone\" dataKey=\"# of reddit mentions\" stroke=\"#8884d8\" />\n                        </LineChart>\n                    <h6>Weeks ago</h6>\n                </div>\n                <div className={classes.graph}>\n                    <h6 className={classes.reddit_mentions_graph}>Reddit Sentiment (Weekly)</h6>\n                        <LineChart\n                         width={400}\n                         height={400}\n                         data={reddit_sentiment}\n                         margin={{ top: 5, right: 20, left: 15, bottom: 5 }}\n                        >\n                            <XAxis dataKey=\"name\"/>\n                            <YAxis domain={['auto', 'auto']}/>\n                            <Tooltip />\n                            <CartesianGrid stroke=\"#f5f5f5\" />\n                            <Line type=\"monotone\" dataKey=\"Average sentiment\" stroke=\"#8884d8\" />\n                        </LineChart>\n                    <h6>Weeks ago</h6>\n                </div>\n            </div>\n            <div className={classes.graph_row}>\n                <div className={classes.graph}>\n                    <h6 className={classes.reddit_mentions_graph}>Twitter Mentions (Weekly)</h6>\n                        <LineChart\n                         width={400}\n                         height={400}\n                         data={twitter_mentions}\n                         margin={{ top: 5, right: 20, left: 15, bottom: 5 }}\n                        >\n                            <XAxis dataKey=\"name\"/>\n                            <YAxis domain={['auto', 'auto']}/>\n                            <Tooltip />\n                            <CartesianGrid stroke=\"#f5f5f5\" />\n                            <Line type=\"monotone\" dataKey=\"# of twitter mentions\" stroke=\"#8884d8\" />\n                        </LineChart>\n                    <h6>Weeks ago</h6>\n                </div>\n                <div className={classes.graph}>\n                    <h6 className={classes.reddit_mentions_graph}>Twitter Sentiment (Weekly)</h6>\n                        <LineChart\n                         width={400}\n                         height={400}\n                         data={twitter_sentiment}\n                         margin={{ top: 5, right: 20, left: 15, bottom: 5 }}\n                        >\n                            <XAxis dataKey=\"name\"/>\n                            <YAxis domain={['auto', 'auto']}/>\n                            <Tooltip />\n                            <CartesianGrid stroke=\"#f5f5f5\" />\n                            <Line type=\"monotone\" dataKey=\"Average sentiment\" stroke=\"#8884d8\" />\n                        </LineChart>\n                    <h6>Weeks ago</h6>\n                </div>\n            </div>\n            <div className={classes.graph_row}>\n                <div className={classes.graph}>\n                    <h6 className={classes.reddit_mentions_graph}>Price (Weekly)</h6>\n                        <LineChart\n                         width={400}\n                         height={400}\n                         data={price}\n                         margin={{ top: 5, right: 20, left: 15, bottom: 5 }}\n                        >\n                            <XAxis dataKey=\"name\"/>\n                            <YAxis domain={['auto', 'auto']}/>\n                            <Tooltip />\n                            <CartesianGrid stroke=\"#f5f5f5\" />\n                            <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" />\n                        </LineChart>\n                    <h6>Weeks ago</h6>\n                </div>\n            </div>\n            <Box className={classes.submit} pt={10}>\n                <BootstrapButton onClick={() => onClear()}>\n                    Make another prediction\n                </BootstrapButton>\n            </Box>\n        </Box>\n    )\n}\n\nexport default Report",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":53,"column":7,"nodeType":"48","endLine":53,"endColumn":74},{"ruleId":"49","severity":1,"message":"50","line":4,"column":65,"nodeType":"51","messageId":"52","endLine":4,"endColumn":71},{"ruleId":"53","severity":1,"message":"54","line":191,"column":61,"nodeType":"55","messageId":"56","endLine":191,"endColumn":63},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Legend' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]